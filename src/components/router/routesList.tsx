import { Navigate } from 'react-router-dom'
import { NotExistPage } from '../page/not-exist/not-exist-page.component.tsx'
import { CabinetPage } from '../page/cabinet/cabinet-page.component.tsx'
import { TRoute } from '../../shared-react-components/AlexRouter/AlexRouter.tsx'
import { CustomizationPage, EPageType } from '../page/customization/customization-page.component.tsx'
import { customizationPageConfig } from '../page/customization/data/customization-page-config.data.tsx'

export const routesList: TRoute[] = [
    {
        path: '/',
        name: 'Главная',
        component: null,
    },

    {
        path: '*',
        name: 'Не существует',
        component: <NotExistPage/>,
    },

    {
        path: 'cabinet',
        name: 'Личный кабинет',
        component: <CabinetPage/>,
    },

    {
        path: `customization/users`,
        name: 'Пользователи',
        component: <Navigate to={`/customization/users/${EPageType.table}`}/>,
    },
    {
        path: `customization/users/${EPageType.table}`,
        name: 'Таблица пользователей',
        component: <CustomizationPage config={customizationPageConfig}/>,
    },
    {
        path: `customization/users/${EPageType.view}`,
        name: 'Пользователь',
        component: <CustomizationPage config={customizationPageConfig}/>,
    },
    {
        path: `customization/users/${EPageType.edit}`,
        name: 'Настройка пользователей',
        component: <CustomizationPage config={customizationPageConfig}/>,
    },
    {
        path: `customization/users/${EPageType.add}`,
        name: 'Добавление пользователя',
        component: <CustomizationPage config={customizationPageConfig}/>,
    },
]

const mapRoutesListPaths = (routesList: TRoute[]): string[] => {
    const resultArr: string[] = []

    routesList.map((item) => {
        resultArr.push(item.path)
        if (item.routes) {
            resultArr.push(...mapRoutesListPaths(item.routes))
        }
    })

    return resultArr
}

const mapRoutesListNames = (routesList: TRoute[]): [string, string][] => {
    const resultArr: [string, string][] = []

    routesList.map((item) => {
        resultArr.push([item.path, item.name])
        if (item.routes) {
            resultArr.push(...mapRoutesListNames(item.routes))
        }
    })

    return resultArr
}
export const autoGeneratedRoutesListMap = new Map(mapRoutesListNames(routesList))
export const autoGeneratedAllowedLinks = mapRoutesListPaths(routesList)